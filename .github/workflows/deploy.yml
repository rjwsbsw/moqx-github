# .github/workflows/deploy.yml
# Basic CI/CD Pipeline für moqx - Level 1

name: 🚀 Deploy moqx to Azure

on:
#   push:
#     branches: [main]
#     paths-ignore:
#       - 'README.md'
#       - 'docs/**'
  workflow_dispatch:  # Manuell auslösbar für Tests
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  # Konstante Werte (können später in Secrets)
  WEBAPP_NAME: moqxapp
  ACR_NAME: moqxregistry  
  ACR_IMAGE_NAME: moqx
  REGION: germanywestcentral
  SQL_SERVER_NAME: saengersql
  SQL_ADMIN_USER: saengeradmin
  SQL_DB_NAME: quizdb01

jobs:
  # Job 1: Build und Test
  build:
    name: 🏗️ Build Container
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🔑 Login to Azure Container Registry
      run: |
        az acr login --name $ACR_NAME
    
    - name: 🏗️ Build and Push Container Image
      run: |
        # Image mit Build-Nummer taggen
        IMAGE_TAG="${{ github.sha }}"
        FULL_IMAGE="${ACR_NAME}.azurecr.io/${ACR_IMAGE_NAME}:${IMAGE_TAG}"
        LATEST_IMAGE="${ACR_NAME}.azurecr.io/${ACR_IMAGE_NAME}:latest"
        
        echo "Building image: $FULL_IMAGE"
        
        # Build mit beiden Tags
        docker build \
          --tag $FULL_IMAGE \
          --tag $LATEST_IMAGE \
          .
        
        # Push beide Tags
        docker push $FULL_IMAGE
        docker push $LATEST_IMAGE
        
        # Image-Namen für nächsten Job speichern
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
        echo "FULL_IMAGE=${FULL_IMAGE}" >> $GITHUB_ENV
    
    - name: 🧪 Basic Container Test
      run: |
        # Schneller Rauchtest: Container startet ohne Fehler?
        LATEST_IMAGE="${ACR_NAME}.azurecr.io/${ACR_IMAGE_NAME}:latest"
        echo "Testing image: $LATEST_IMAGE"
        
        # Container 5 Sekunden laufen lassen
        # Nur prüfen ob Container gebaut werden kann
        docker run --rm --entrypoint="" $LATEST_IMAGE python --version
        docker run --rm --entrypoint="" $LATEST_IMAGE ls -la /app/
        echo "✅ Container structure looks good"

  # Job 2: Deploy to Azure
  deploy:
    name: 🌍 Deploy to Azure
    needs: build
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment für Approval
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 📊 Show Deployment Info
      run: |
        echo "🎯 Deploying to Environment: production"
        echo "🏗️ Resource Group: ${{ secrets.RESOURCE_GROUP }}"
        echo "🌍 Region: $REGION"
        echo "📦 Image: ${ACR_NAME}.azurecr.io/${ACR_IMAGE_NAME}:latest"
        echo "🗄️  Database: ${SQL_SERVER_NAME}.database.windows.net/${SQL_DB_NAME}"
    
    - name: 🔧 Prepare Deployment Script
      run: |
        # Deploy-Script für GitHub Actions vorbereiten
        chmod +x ./scripts/deploy-azure.sh
        
        # Environment Variables exportieren
        export RESOURCE_GROUP="${{ secrets.RESOURCE_GROUP }}"
        export SQL_ADMIN_PASSWORD="${{ secrets.SQL_ADMIN_PASSWORD }}"
        export IMAGE_TAG="${{ github.sha }}"
        
        echo "✅ Environment prepared"
    
    - name: 🚀 Run Deployment
      run: |
        ./scripts/deploy-azure.sh
      env:
        RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
        SQL_ADMIN_PASSWORD: ${{ secrets.SQL_ADMIN_PASSWORD }}
        IMAGE_TAG: ${{ github.sha }}
        
    - name: 🏥 Health Check
      run: |
        echo "🔍 Checking application health..."
        
        # Warten bis App hochgefahren ist
        sleep 30
        
        APP_URL="https://${WEBAPP_NAME}.azurewebsites.net"
        echo "Testing URL: $APP_URL"
        
        # Einfacher HTTP-Check
        if curl -s -o /dev/null -w "%{http_code}" $APP_URL | grep -q "200\|301\|302"; then
          echo "✅ Application is healthy!"
          echo "🌍 App URL: $APP_URL"
        else
          echo "❌ Health check failed!"
          echo "🔍 Checking Azure logs..."
          az webapp log tail --name $WEBAPP_NAME --resource-group ${{ secrets.RESOURCE_GROUP }} || true
          exit 1
        fi
    
    - name: 📝 Deployment Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🎯 Environment | production |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Image Tag | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌍 App URL | https://${WEBAPP_NAME}.azurewebsites.net |" >> $GITHUB_STEP_SUMMARY
        echo "| 🕐 Deployed At | $(date -u) |" >> $GITHUB_STEP_SUMMARY
        echo "| 👤 Triggered By | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "| ✅ Status | Successful |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ❌ Status | Failed |" >> $GITHUB_STEP_SUMMARY
        fi
